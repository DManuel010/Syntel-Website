-- ************ CUSTOMERS STATUS *************

-- CREATE TABLE CUSTOMER_STATUS (
	-- CUSTOMER_STATUS_ID	VARCHAR(4000),
	-- CUSTOMER_STATUS		VARCHAR(50),
	-- PRIMARY KEY(CUSTOMER_STATUS_ID),
	-- CONSTRAINT UNIQUE_CUST_STATUS UNIQUE(CUSTOMER_STATUS)
-- );

-- **************** CUSTOMERS ****************

CREATE TABLE CUSTOMERS (
	CUSTOMER_ID 		VARCHAR(4000) NOT NULL,
	FIRST_NAME  		VARCHAR(50)   NOT NULL,
	LAST_NAME 			VARCHAR(50)   NOT NULL,
	EMAIL				VARCHAR(255)  NOT NULL,
	PASSWORD 			VARCHAR(255)  NOT NULL,
	DOB					DATE          NOT NULL,
	REGISTER_DATE		TIMESTAMP     DEFAULT SYSTIMESTAMP NOT NULL,
	LAST_LOGIN			TIMESTAMP     DEFAULT SYSTIMESTAMP NOT NULL,
	HOME_NUMBER			VARCHAR(16)   NOT NULL,
	MOBILE_NUMBER		VARCHAR(16)   NOT NULL,
	-- CUSTOMER_STATUS_ID	VARCHAR(4000) NOT NULL,
	PRIMARY KEY(CUSTOMER_ID),
	CONSTRAINT UNIQUE_CUST_EMAIL UNIQUE(EMAIL),
	CONSTRAINT CUSTOMER_STATUS_ID_FK FOREIGN KEY(CUSTOMER_STATUS_ID)
	REFERENCES CUSTOMER_STATUS(CUSTOMER_STATUS_ID) ON DELETE CASCADE
);

-- **************** LOCATIONS ****************

CREATE TABLE CUSTOMER_LOCATIONS (
	CUSTOMER_LOCATION_ID	VARCHAR(4000) NOT NULL,
	STREET					VARCHAR(255)  NOT NULL,
	CITY					VARCHAR(255)  NOT NULL,
	STATE 					VARCHAR(255)  NOT NULL,
	ZIP						VARCHAR(5)	  NOT NULL,
	INSTRUCTIONS			VARCHAR(300)  NULL,
	APT_SUITE				VARCHAR(300)  NULL,
	LOCATION_LABEL			VARCHAR(100)  NULL,
	CUSTOMER_ID				VARCHAR(4000) NOT NULL,
	PRIMARY KEY(CUSTOMER_LOCATION_ID),
	CONSTRAINT CUSTOMER_ID_FK FOREIGN KEY(CUSTOMER_ID)
	REFERENCES CUSTOMERS(CUSTOMER_ID) ON DELETE CASCADE
);

-- **************** ZIP_TAXES ****************

CREATE TABLE ZIP_TAXES(
	ZIP_TAXES_ID 	VARCHAR(4000) NOT NULL,
	ZIP			 	VARCHAR(5)    NOT NULL,
	TAX_RATE	 	NUMBER(3, 2),
	PRIMARY KEY(ZIP_TAXES_ID),
	CONSTRAINT UNIQUE_ZIP UNIQUE(ZIP),
	CONSTRAINT TAX_RATE_CHK CHECK(TAX_RATE BETWEEN 0 AND 100.00)
);

-- ************** MEAL CATEGORY **************

CREATE TABLE MEAL_CATEGORIES(
	MEAL_CATEGORY_ID	VARCHAR(4000) NOT NULL,
	CATEGORY_NAME		VARCHAR(100)  NOT NULL,
	PRIMARY KEY(MEAL_CATEGORY_ID),
	CONSTRAINT UNIQUE_CATEGORY_NAME UNIQUE(CATEGORY_NAME)
);

-- **************** MEAL TYPE ****************

CREATE TABLE MEAL_TYPES (
	MEAL_TYPE_ID	VARCHAR(4000) NOT NULL,
	MEAL_TYPE		VARCHAR(100)  NOT NULL,
	PRIMARY KEY(MEAL_TYPE_ID),
	CONSTRAINT UNIQUE_MEAL_TYPE UNIQUE(MEAL_TYPE)
);

-- **************** MEAL MENU ****************

CREATE TABLE MEAL_MENUS (
	MEAL_MENU_ID		VARCHAR(4000) NOT NULL,
	NAME				VARCHAR(255)  NOT NULL,
	DESCRIPTION			VARCHAR(500)  NOT NULL,
	PRICE				DECIMAL(2, 2) NOT NULL,
	STOCK				INT 		  NOT NULL,
	MEAL_IMAGE_PATH		VARCHAR(255)  NOT NULL,
	VEGETARIAN			CHAR(1) 	  NOT NULL,
	MEAL_CATEGORY_ID	VARCHAR(4000) NOT NULL,
	MEAL_TYPE_ID		VARCHAR(4000) NOT NULL,
	MEAL_OF_THE_DAY		TIMESTAMP NULL,
	PRIMARY KEY(MEAL_MENU_ID),
	CONSTRAINT UNIQUE_MEAL_NAME UNIQUE(NAME),
	CONSTRAINT VEGETARIAN_CHK CHECK(VEGETARIAN IN ('Y', 'N')),
	CONSTRAINT MEAL_CATEGORY_FK FOREIGN KEY(MEAL_CATEGORY_ID)
	REFERENCES MEAL_CATEGORIES(MEAL_CATEGORY_ID),
	CONSTRAINT MEAL_TYPE_FK FOREIGN KEY(MEAL_TYPE_ID)
	REFERENCES MEAL_TYPES(MEAL_TYPE_ID)
);

-- ************* SPECIALS ************

CREATE TABLE SPECIALS (
	MEAL_MENU_ID		VARCHAR(4000) NOT NULL,
	DISCOUNT_PERCENTAGE INT,
	PRIMARY KEY(MEAL_MENU_ID),
	CONSTRAINT MEAL_MENU_ID_SPECIALS FOREIGN KEY(MEAL_MENU_ID)
	REFERENCES MEAL_MENUS(MEAL_MENU_ID)
);

-- ************* ORDERS_STATUS ************

CREATE TABLE ORDER_STATUS (
	ORDER_STATUS_ID	VARCHAR(4000) NOT NULL,
	STATUS_NAME		VARCHAR(100)  NOT NULL,
	PRIMARY KEY(ORDER_STATUS_ID),
	CONSTRAINT UNIQUE_ORDER_STATUS_NAME UNIQUE(STATUS_NAME)
);

-- **************** EMPLOYEES *************

-- CREATE TABLE EMPLOYEES (
	-- EMPLOYEE_ID		VARCHAR(4000) NOT NULL,
	-- FIRST_NAME		VARCHAR(50)   NOT NULL,
	-- LAST_NAME		VARCHAR(50)	  NOT NULL,
	-- EMAIL			VARCHAR(255)  NOT NULL,
	-- TITLE			VARCHAR(100)  NOT NULL,
	-- WORK_NUMBER		VARCHAR(16)	  NOT NULL,
	-- HIRE_DATE		TIMESTAMP DEFAULT SYSTIMESTAMP,
	-- PRIMARY KEY(EMPLOYEE_ID),
	-- CONSTRAINT UNIQUE_EMPLOYEE_EMAIL UNIQUE(EMAIL)
-- );

-- ************* STORE_LOCATION ***********

CREATE TABLE STORE_LOCATIONS (
	STORE_LOCATION_ID 	VARCHAR(4000) NOT NULL,
	STREET				VARCHAR(255)  NOT NULL,
	CITY				VARCHAR(255)  NOT NULL,
	STATE				VARCHAR(255)  NOT NULL,
	ZIP					VARCHAR(5)	  NOT NULL,
	PHONE_NUMBER		VARCHAR(16)   NOT NULL,
	PRIMARY KEY(STORE_LOCATION_ID)
);

-- **************** STORES ****************

CREATE TABLE STORES (
	STORE_ID			VARCHAR(4000) NOT NULL,
	STORE_NAME			VARCHAR(300)  NOT NULL,
	PHONE_NUMBER		VARCHAR(16)	  NOT NULL,
	MANAGER_ID			VARCHAR(4000) NOT NULL,
	STORE_LOCATION_ID	VARCHAR(4000) NOT NULL,
	OPEN_TIME			VARCHAR(15) DEFAULT '6:00 AM',
	CLOSE_TIME			VARCHAR(15) DEFAULT '10:00 PM',
	PRIMARY KEY(STORE_ID)
);

-- **************** ORDERS ****************

CREATE TABLE ORDERS (
	ORDER_ID 				VARCHAR(4000) 	NOT NULL,
	DELIVERY_DATE			TIMESTAMP 	  	NOT NULL,
	TIMES_CHANGED			INT DEFAULT 0 	NOT NULL,
	-- CUSTOMER_ID 			VARCHAR(4000)	NOT NULL,
	CUSTOMER_LOCATION_ID	VARCHAR(4000)	NOT NULL,
	ORDER_STATUS_ID			VARCHAR(4000)	NOT NULL,
	DISCOUNT 				INT 			NULL,
	TIP						NUMBER(3, 2)	NULL,
	INSTRUCTIONS			VARCHAR(300)	NULL,
	TOTAL_PRICE				NUMBER(3, 2)	NOT NULL,
	ORDER_ON_HOLD			CHAR(1)	DEFAULT 'N' NOT NULL,
	ORDER_DATE				TIMESTAMP DEFAULT SYSTIMESTAMP,
	PRIMARY KEY(ORDER_ID),
	CONSTRAINT CUSTOMER_ID_ORDERS_FK FOREIGN KEY(CUSTOMER_ID)
	REFERENCES CUSTOMERS(CUSTOMER_ID) ON DELETE CASCADE,
	CONSTRAINT CUSTOMER_LOCATION_ID_ORDERS_FK FOREIGN KEY(CUSTOMER_LOCATION_ID)
	REFERENCES CUSTOMER_LOCATIONS(CUSTOMER_LOCATION_ID),
	CONSTRAINT ORDER_STATUS_ID_FK FOREIGN KEY(ORDER_STATUS_ID)
	REFERENCES ORDER_STATUS(ORDER_STATUS_ID),
	CONSTRAINT ORDER_ON_HOLD_CHK CHECK(ORDER_ON_HOLD IN ('N','Y'))
);

--**************** ORDER_MENUS ****************

CREATE TABLE ORDER_MENUS (
	ORDER_MENU_ID	VARCHAR(4000) NOT NULL,
	ORDER_ID		VARCHAR(4000) NOT NULL,
	MEAL_MENU_ID	VARCHAR(4000) NOT NULL,
	QUANTITY		INT DEFAULT 1 NOT NULL,
	PRIMARY KEY(ORDER_MENU_ID),
	CONSTRAINT ORDER_ID_MENUS_FK FOREIGN KEY(ORDER_ID)
	REFERENCES ORDERS(ORDER_ID),
	CONSTRAINT MEAL_MENU_ID_MENUS_FK FOREIGN KEY(MEAL_MENU_ID)
	REFERENCES MEAL_MENUS(MEAL_MENU_ID)
);
	
	
	
	

	


	



	
	
	
	